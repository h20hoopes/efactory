{"version":3,"sources":["components/Navigation.jsx","pages/HomePage.jsx","pages/Blog.jsx","App.jsx","serviceWorker.js","index.js"],"names":["isFirstLevel","group","Navigation","navigation","Navbar","bg","expand","Collapse","Nav","className","listOfNavItems","makeNavItemsWithIteration","map","listItem","sublinks","length","NavDropdown","title","name","key","Link","href","link","Fragment","Form","inline","FormControl","type","placeholder","Button","variant","makeNavigation","this","props","settings","navigationItems","Component","HomePage","Blog","App","state","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y6DA6DA,SAASA,EAAaC,GACpB,MAAc,mBAAVA,EAOSC,M,uKA3DX,IACMC,EAMV,SAAwBA,GACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,SAAR,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,YA2BDC,EA3ByBP,EAO/C,SAASQ,EAA0BD,GAiBjC,OAhBcA,EAAeE,KAAI,SAACC,GAAD,OAC/BA,EAASC,SAASC,OAAS,EACzB,kBAACC,EAAA,EAAD,CACEP,UAAWT,EAAaa,EAASZ,OAAS,WAAa,YACvDgB,MAAOJ,EAASK,KAChBC,IAAKN,EAASK,MAEbP,EAA0BE,EAASC,WAItC,kBAACN,EAAA,EAAIY,KAAL,CAAUX,UAAU,WAAWY,KAAMR,EAASS,KAAMH,IAAKN,EAASK,MAC/DL,EAASK,SAQTP,CAA0BD,KA3B3B,kBAAC,IAAMa,SAAP,KAgCJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASnB,UAAU,YACxD,kBAACoB,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,cARN,IAAsBpB,EArCCqB,CADKC,KAAKC,MAAMC,SAASC,iBAG5C,OAAO,kBAAC,IAAMZ,SAAP,KAAiBpB,O,GALHiC,aCKVC,E,uKARX,OACE,kBAAC,IAAMd,SAAP,KACE,2D,GAJea,aCURE,E,uKARX,OACE,kBAAC,IAAMf,SAAP,KACE,sD,GAJWa,a,uBCiCJG,E,4MApBbC,MAAQ,CAAEN,Y,uDAER,OACE,kBAAC,IAAMX,SAAP,KACE,kBAAC,EAAD,CAAYW,SAAUF,KAAKQ,MAAMN,WACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,SACV,kBAAC,EAAD,CAAMP,SAAUF,KAAKQ,MAAMN,YAE7B,kBAAC,IAAD,CAAOO,KAAK,KACV,kBAAC,EAAD,CAAUP,SAAUF,KAAKQ,MAAMN,mB,GAZ3BE,aCHEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c67f414.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Navigation extends Component {\n  render() {\n    const navigationProps = this.props.settings.navigationItems;\n    const navigation = makeNavigation(navigationProps);\n\n    return <React.Fragment>{navigation}</React.Fragment>;\n  }\n}\n\nfunction makeNavigation(navigation) {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">{makeNavItems(navigation)}</Nav>\n        <React.Fragment>{makeForm()}</React.Fragment>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nfunction makeNavItemsWithIteration(listOfNavItems) {\n  let navItem = listOfNavItems.map((listItem) =>\n    listItem.sublinks.length > 0 ? (\n      <NavDropdown // if sublinks\n        className={isFirstLevel(listItem.group) ? \"dropdown\" : \"dropright\"}\n        title={listItem.name}\n        key={listItem.name}\n      >\n        {makeNavItemsWithIteration(listItem.sublinks)}\n      </NavDropdown>\n    ) : (\n      // if no sublinks\n      <Nav.Link className=\"nav-item\" href={listItem.link} key={listItem.name}>\n        {listItem.name}\n      </Nav.Link>\n    )\n  );\n  return navItem;\n}\n\nfunction makeNavItems(listOfNavItems) {\n  return makeNavItemsWithIteration(listOfNavItems, 0);\n}\n\nfunction makeForm() {\n  return (\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\">Search</Button>\n    </Form>\n  );\n}\n\nfunction isFirstLevel(group) {\n  if (group !== \"top-navigation\") {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport default Navigation;\n","import React, { Component } from \"react\";\nimport Navigation from \"../components/Navigation\";\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div>This is the Home Page</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\nimport Navigation from \"../components/Navigation\";\n\nclass Blog extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div>This is the Blog</div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Blog;\n","import React, { Component } from \"react\";\nimport HomePage from \"./pages/HomePage\";\nimport Blog from \"./pages/Blog\";\nimport settings from \"./settings.json\";\nimport Navigation from \"./components/Navigation\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n  HashRouter,\n} from \"react-router-dom\";\n\nclass App extends Component {\n  state = { settings };\n  render() {\n    return (\n      <React.Fragment>\n        <Navigation settings={this.state.settings} />\n        <Router>\n          <Switch>\n            <Route path=\"/blog\">\n              <Blog settings={this.state.settings} />\n            </Route>\n            <Route path=\"/\">\n              <HomePage settings={this.state.settings} />\n            </Route>\n          </Switch>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}